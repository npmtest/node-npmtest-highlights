{"/home/travis/build/npmtest/node-npmtest-highlights/test.js":"/* istanbul instrument in package npmtest_highlights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-highlights/lib.npmtest_highlights.js":"/* istanbul instrument in package npmtest_highlights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_highlights = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_highlights = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-highlights/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-highlights && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_highlights */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_highlights\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_highlights.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_highlights.rollup.js'] =\n            local.assetsDict['/assets.npmtest_highlights.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_highlights.__dirname + '/lib.npmtest_highlights.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-highlights/node_modules/highlights/lib/highlights.js":"(function() {\n  var CSON, GrammarRegistry, Highlights, Selector, _, fs, once, path, selector;\n\n  path = require('path');\n\n  _ = require('underscore-plus');\n\n  fs = require('fs-plus');\n\n  CSON = require('season');\n\n  once = require('once');\n\n  GrammarRegistry = require('first-mate').GrammarRegistry;\n\n  Selector = require('first-mate-select-grammar');\n\n  selector = Selector();\n\n  module.exports = Highlights = (function() {\n    function Highlights(arg) {\n      var ref;\n      ref = arg != null ? arg : {}, this.includePath = ref.includePath, this.registry = ref.registry, this.scopePrefix = ref.scopePrefix;\n      if (this.registry == null) {\n        this.registry = new GrammarRegistry({\n          maxTokensPerLine: Infinity\n        });\n      }\n      this._loadingGrammars = false;\n      if (this.scopePrefix == null) {\n        this.scopePrefix = '';\n      }\n    }\n\n    Highlights.prototype.highlightSync = function(arg) {\n      var fileContents, filePath, ref, scopeName;\n      ref = arg != null ? arg : {}, filePath = ref.filePath, fileContents = ref.fileContents, scopeName = ref.scopeName;\n      this.loadGrammarsSync();\n      if (filePath) {\n        if (fileContents == null) {\n          fileContents = fs.readFileSync(filePath, 'utf8');\n        }\n      }\n      return this._highlightCommon({\n        filePath: filePath,\n        fileContents: fileContents,\n        scopeName: scopeName\n      });\n    };\n\n    Highlights.prototype.highlight = function(arg, cb) {\n      var fileContents, filePath, ref, scopeName;\n      ref = arg != null ? arg : {}, filePath = ref.filePath, fileContents = ref.fileContents, scopeName = ref.scopeName;\n      return this.loadGrammars((function(_this) {\n        return function(err) {\n          if (err) {\n            return cb(err);\n          }\n          if (filePath && !fileContents) {\n            return fs.readFile(filePath, 'utf8', function(err, fileContents) {\n              if (err) {\n                return cb(err);\n              }\n              return cb(false, _this._highlightCommon({\n                filePath: filePath,\n                fileContents: fileContents,\n                scopeName: scopeName\n              }));\n            });\n          } else {\n            return cb(false, _this._highlightCommon({\n              filePath: filePath,\n              fileContents: fileContents,\n              scopeName: scopeName\n            }));\n          }\n        };\n      })(this));\n    };\n\n    Highlights.prototype.requireGrammarsSync = function(arg) {\n      var file, grammarPath, grammarsDir, k, len, modulePath, packageDir, ref;\n      modulePath = (arg != null ? arg : {}).modulePath;\n      this.loadGrammarsSync();\n      if (fs.isFileSync(modulePath)) {\n        packageDir = path.dirname(modulePath);\n      } else {\n        packageDir = modulePath;\n      }\n      grammarsDir = path.resolve(packageDir, 'grammars');\n      if (!fs.isDirectorySync(grammarsDir)) {\n        return;\n      }\n      ref = fs.readdirSync(grammarsDir);\n      for (k = 0, len = ref.length; k < len; k++) {\n        file = ref[k];\n        if (grammarPath = CSON.resolve(path.join(grammarsDir, file))) {\n          this.registry.loadGrammarSync(grammarPath);\n        }\n      }\n    };\n\n    Highlights.prototype.requireGrammars = function(arg, cb) {\n      var modulePath;\n      modulePath = (arg != null ? arg : {}).modulePath;\n      return this.loadGrammars((function(_this) {\n        return function(err) {\n          if (err) {\n            return cb(err);\n          }\n          return fs.stat(modulePath, function(err, stat) {\n            var grammarsDir, packageDir;\n            if (err) {\n              return cb(err);\n            }\n            if (stat.isFile()) {\n              packageDir = path.dirname(modulePath);\n            } else if (stat.isDirectory()) {\n              packageDir = modulePath;\n            } else {\n              return cb();\n            }\n            grammarsDir = path.resolve(packageDir, 'grammars');\n            return _this._registryLoadGrammarsDir(grammarsDir, cb);\n          });\n        };\n      })(this));\n    };\n\n    Highlights.prototype._registryLoadGrammarsDir = function(dir, cb) {\n      var done, todo;\n      cb = once(cb);\n      todo = false;\n      done = function(err) {\n        if (err) {\n          return cb(err);\n        }\n        if (!--todo) {\n          return cb();\n        }\n      };\n      return fs.readdir(dir, (function(_this) {\n        return function(err, files) {\n          var file, grammarPath, results;\n          if (err) {\n            return cb(err);\n          }\n          todo = files.length;\n          if (!todo) {\n            return cb(false, []);\n          }\n          results = [];\n          while (files.length) {\n            file = files.shift();\n            grammarPath = path.join(dir, file);\n            if (CSON.isObjectPath(grammarPath)) {\n              results.push(_this._registryLoadGrammar(grammarPath, function(err) {\n                return done(err);\n              }));\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        };\n      })(this));\n    };\n\n    Highlights.prototype._registryLoadGrammar = function(grammarPath, cb) {\n      return fs.stat(grammarPath, (function(_this) {\n        return function(err, stat) {\n          if (err) {\n            return cb(err);\n          }\n          if (!stat.isFile()) {\n            return cb();\n          }\n          return _this.registry.loadGrammar(grammarPath, cb);\n        };\n      })(this));\n    };\n\n    Highlights.prototype._highlightCommon = function(arg) {\n      var fileContents, filePath, grammar, html, k, l, lastLineTokens, len, len1, lineTokens, ref, ref1, scopeName, scopeStack, scopes, tokens, value;\n      ref = arg != null ? arg : {}, filePath = ref.filePath, fileContents = ref.fileContents, scopeName = ref.scopeName;\n      grammar = this.registry.grammarForScopeName(scopeName);\n      if (grammar == null) {\n        grammar = selector.selectGrammar(this.registry, filePath, fileContents);\n      }\n      lineTokens = grammar.tokenizeLines(fileContents);\n      if (lineTokens.length > 0) {\n        lastLineTokens = lineTokens[lineTokens.length - 1];\n        if (lastLineTokens.length === 1 && lastLineTokens[0].value === '') {\n          lineTokens.pop();\n        }\n      }\n      html = '<pre class=\"editor editor-colors\">';\n      for (k = 0, len = lineTokens.length; k < len; k++) {\n        tokens = lineTokens[k];\n        scopeStack = [];\n        html += '<div class=\"line\">';\n        for (l = 0, len1 = tokens.length; l < len1; l++) {\n          ref1 = tokens[l], value = ref1.value, scopes = ref1.scopes;\n          if (!value) {\n            value = ' ';\n          }\n          html = this.updateScopeStack(scopeStack, scopes, html);\n          html += \"<span>\" + (this.escapeString(value)) + \"</span>\";\n        }\n        while (scopeStack.length > 0) {\n          html = this.popScope(scopeStack, html);\n        }\n        html += '</div>';\n      }\n      html += '</pre>';\n      return html;\n    };\n\n    Highlights.prototype.loadGrammarsSync = function() {\n      var filePath, grammar, grammarPath, grammarsPath, k, len, ref, ref1;\n      if (this.registry.grammars.length > 1) {\n        return;\n      }\n      if (typeof this.includePath === 'string') {\n        if (fs.isFileSync(this.includePath)) {\n          this.registry.loadGrammarSync(this.includePath);\n        } else if (fs.isDirectorySync(this.includePath)) {\n          ref = fs.listSync(this.includePath, ['cson', 'json']);\n          for (k = 0, len = ref.length; k < len; k++) {\n            filePath = ref[k];\n            this.registry.loadGrammarSync(filePath);\n          }\n        }\n      }\n      grammarsPath = path.join(__dirname, '..', 'gen', 'grammars.json');\n      ref1 = JSON.parse(fs.readFileSync(grammarsPath));\n      for (grammarPath in ref1) {\n        grammar = ref1[grammarPath];\n        if (this.registry.grammarForScopeName(grammar.scopeName) != null) {\n          continue;\n        }\n        grammar = this.registry.createGrammar(grammarPath, grammar);\n        this.registry.addGrammar(grammar);\n      }\n    };\n\n    Highlights.prototype.loadGrammars = function(cb) {\n      var callbacks, done, grammarsArray, grammarsFromJSON, pendingAsyncCalls;\n      cb = once(cb);\n      if (this._loadingGrammars === true || this.registry.grammars.length > 1) {\n        return setImmediate(cb);\n      } else if (Array.isArray(this._loadingGrammars)) {\n        return this._loadingGrammars.push(cb);\n      }\n      this._loadingGrammars = [cb];\n      callbacks = (function(_this) {\n        return function(err) {\n          var cbs, results;\n          cbs = _this._loadingGrammars;\n          _this._loadingGrammars = true;\n          results = [];\n          while (cbs.length) {\n            results.push(cbs.shift()(err));\n          }\n          return results;\n        };\n      })(this);\n      pendingAsyncCalls = 2;\n      grammarsFromJSON = null;\n      grammarsArray = null;\n      done = (function(_this) {\n        return function(err, paths) {\n          if (err) {\n            return callbacks(err);\n          }\n          if (!--pendingAsyncCalls) {\n            return _this._populateGrammars(grammarsFromJSON, grammarsArray, callbacks);\n          }\n        };\n      })(this);\n      this._findGrammars(function(err, arr) {\n        grammarsArray = arr;\n        return done(err);\n      });\n      return this._loadGrammarsJSON(function(err, fromJSON) {\n        grammarsFromJSON = fromJSON;\n        return done(err);\n      });\n    };\n\n    Highlights.prototype._populateGrammars = function(grammarsFromJSON, grammarsArray, cb) {\n      var done, grammars, results, toLoad;\n      toLoad = (grammarsArray || []).length;\n      grammars = [];\n      done = (function(_this) {\n        return function(err, grammar) {\n          var grammarPath;\n          if (err) {\n            return cb(err);\n          }\n          if (grammar) {\n            grammars.push(grammar);\n          }\n          if (!--toLoad) {\n            for (grammarPath in grammarsFromJSON) {\n              grammar = grammarsFromJSON[grammarPath];\n              if (_this.registry.grammarForScopeName(grammar.scopeName) != null) {\n                continue;\n              }\n              grammar = _this.registry.createGrammar(grammarPath, grammar);\n              _this.registry.addGrammar(grammar);\n            }\n            return cb(false, true);\n          }\n        };\n      })(this);\n      if (!toLoad) {\n        toLoad = 1;\n        return done();\n      }\n      results = [];\n      while (grammarsArray.length) {\n        results.push(this.registry.loadGrammar(grammarsArray.shift(), done));\n      }\n      return results;\n    };\n\n    Highlights.prototype._findGrammars = function(cb) {\n      if (typeof this.includePath === 'string') {\n        return fs.stat(this.includePath, (function(_this) {\n          return function(err, stat) {\n            if (err) {\n              return cb(err);\n            }\n            if (stat.isFile()) {\n              return cb(false, [_this.includePath]);\n            } else if (stat.isDirectory()) {\n              return fs.list(_this.includePath, ['cson', 'json'], function(err, list) {\n                if (list == null) {\n                  list = [];\n                }\n                return cb(err, list);\n              });\n            } else {\n              return cb(new Error('unsupported file type.'));\n            }\n          };\n        })(this));\n      } else {\n        return setImmediate(cb);\n      }\n    };\n\n    Highlights.prototype._loadGrammarsJSON = function(cb) {\n      var grammarsPath;\n      grammarsPath = path.join(__dirname, '..', 'gen', 'grammars.json');\n      return fs.readFile(grammarsPath, function(err, contents) {\n        var error;\n        try {\n          return cb(false, JSON.parse(contents));\n        } catch (error) {\n          err = error;\n          return cb(err);\n        }\n      });\n    };\n\n    Highlights.prototype.escapeString = function(string) {\n      return string.replace(/[&\"'<> ]/g, function(match) {\n        switch (match) {\n          case '&':\n            return '&amp;';\n          case '\"':\n            return '&quot;';\n          case \"'\":\n            return '&#39;';\n          case '<':\n            return '&lt;';\n          case '>':\n            return '&gt;';\n          case ' ':\n            return '&nbsp;';\n          default:\n            return match;\n        }\n      });\n    };\n\n    Highlights.prototype.updateScopeStack = function(scopeStack, desiredScopes, html) {\n      var excessScopes, i, j, k, l, ref, ref1, ref2;\n      excessScopes = scopeStack.length - desiredScopes.length;\n      if (excessScopes > 0) {\n        while (excessScopes--) {\n          html = this.popScope(scopeStack, html);\n        }\n      }\n      for (i = k = ref = scopeStack.length; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {\n        if (_.isEqual(scopeStack.slice(0, i), desiredScopes.slice(0, i))) {\n          break;\n        }\n        html = this.popScope(scopeStack, html);\n      }\n      for (j = l = ref1 = i, ref2 = desiredScopes.length; ref1 <= ref2 ? l < ref2 : l > ref2; j = ref1 <= ref2 ? ++l : --l) {\n        html = this.pushScope(scopeStack, desiredScopes[j], html);\n      }\n      return html;\n    };\n\n    Highlights.prototype.pushScope = function(scopeStack, scope, html) {\n      var className;\n      scopeStack.push(scope);\n      if (scope) {\n        className = this.scopePrefix + scope.replace(/\\.+/g, \" \" + this.scopePrefix);\n        return html += \"<span class=\\\"\" + className + \"\\\">\";\n      } else {\n        return html += \"<span>\";\n      }\n    };\n\n    Highlights.prototype.popScope = function(scopeStack, html) {\n      scopeStack.pop();\n      return html += '</span>';\n    };\n\n    return Highlights;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-highlights/node_modules/highlights/lib/cli.js":"(function() {\n  var Highlights, fs, path, yargs;\n\n  path = require('path');\n\n  fs = require('fs-plus');\n\n  yargs = require('yargs');\n\n  Highlights = require('./highlights');\n\n  module.exports = function() {\n    var argv, fileContents, filePath, html, outputPath;\n    argv = yargs.describe('i', 'Path to file or folder of grammars to include').alias('i', 'include').string('i').describe('o', 'File path to write the HTML output to').alias('o', 'output').string('o').describe('s', 'Scope name of the grammar to use').alias('s', 'scope').string('s').describe('f', 'File path to use for grammar detection when reading from stdin').alias('f', 'file-path').string('f').help('h').alias('h', 'help').usage(\"Usage: highlights [options] [file]\\n\\nOutput the syntax highlighted HTML for a file.\\n\\nIf no input file is specified then the text to highlight is read from standard in.\\n\\nIf no output file is specified then the HTML is written to standard out.\").version().alias('v', 'version').argv;\n    filePath = argv._[0];\n    outputPath = argv.output;\n    if (outputPath) {\n      outputPath = path.resolve(outputPath);\n    }\n    if (filePath) {\n      filePath = path.resolve(filePath);\n      if (!fs.isFileSync(filePath)) {\n        console.error(\"Specified path is not a file: \" + filePath);\n        process.exit(1);\n        return;\n      }\n      html = new Highlights().highlightSync({\n        filePath: filePath,\n        scopeName: argv.scope\n      });\n      if (outputPath) {\n        return fs.writeFileSync(outputPath, html);\n      } else {\n        return console.log(html);\n      }\n    } else {\n      filePath = argv.f;\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n      fileContents = '';\n      process.stdin.on('data', function(chunk) {\n        return fileContents += chunk.toString();\n      });\n      return process.stdin.on('end', function() {\n        html = new Highlights().highlightSync({\n          filePath: filePath,\n          fileContents: fileContents,\n          scopeName: argv.scope\n        });\n        if (outputPath) {\n          return fs.writeFileSync(outputPath, html);\n        } else {\n          return console.log(html);\n        }\n      });\n    }\n  };\n\n}).call(this);\n"}